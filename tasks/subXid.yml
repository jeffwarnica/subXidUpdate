---
- name: Parse {{ _file }} file
  community.general.read_csv:
    path: "{{ _filepath }}"
    fieldnames: id,start,length
    delimiter: ":"
  register: entries

# - name: Dump
#   ansible.builtin.debug:
#     var: entries.list
#     verbosity: 1

- name: Detect if existing ID exists
  ansible.builtin.set_fact:
    _exists: "{{ ( entries.list | selectattr('id', 'match', _xid ) | length ) > 0 }}"

- name: Fail if found and found_strategy is fail
  ansible.builtin.fail:
    msg: "ID '{{ _xid }}'' already exists in {{ _filedesc }}. Can not proceed"
  when:
    - found_strategy == "fail"
    - _exists

- name: Get highest start ID Entry
  ansible.builtin.set_fact:
    highest_entry: "{{ entries.list | sort(attribute='start') | last }}"

- name: Set next_free
  ansible.builtin.set_fact:
    next_free: "{{ (highest_entry.start | int) + (highest_entry.length | int) + 1 }}"

# - name: Dump highest entry
#   ansible.builtin.debug:
#     msg: |
#       highest_entry is {{ highest_entry }}
#       highest_entry was id {{ highest_entry.id }}
#       next free is {{ next_free }}
#     verbosity: 1

- name: Update {{ _filedesc }} with new entry
  ansible.builtin.lineinfile:
    path: "{{ _filepath }}"
    line: "{{ _xid }}:{{ next_free }}:{{ subxid_size }}"
  when:
    - found_strategy == 'skip'
    - not _exists
...
